"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var XMLList_1 = require("./XMLList");
var exception_1 = require("tstl/exception");
var HashMap_1 = require("tstl/container/HashMap");
var Pair_1 = require("tstl/utility/Pair");
var XML = /** @class */ (function (_super) {
    __extends(XML, _super);
    function XML(obj) {
        var _this = _super.call(this) || this;
        if (obj instanceof XML)
            _this._Copy_constructor(obj);
        else {
            _this.property_map_ = new HashMap_1.HashMap();
            _this.value_ = "";
            if (obj !== undefined && typeof obj === "string")
                _this._Parser_constructor(obj);
        }
        return _this;
    }
    /**
     * @hidden
     */
    XML.prototype._Copy_constructor = function (obj) {
        var e_1, _a, e_2, _b;
        // COPY MEMBERS
        this.tag_ = obj.tag_;
        this.value_ = obj.value_;
        this.property_map_ = new HashMap_1.HashMap(obj.property_map_);
        try {
            // COPY CHILDREN
            for (var obj_1 = __values(obj), obj_1_1 = obj_1.next(); !obj_1_1.done; obj_1_1 = obj_1.next()) {
                var entry = obj_1_1.value;
                var xml_list = new XMLList_1.XMLList();
                try {
                    for (var _c = (e_2 = void 0, __values(entry.second)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var child = _d.value;
                        xml_list.push_back(new XML(child));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                this.emplace(entry.first, xml_list);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (obj_1_1 && !obj_1_1.done && (_a = obj_1.return)) _a.call(obj_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @hidden
     */
    XML.prototype._Parser_constructor = function (str) {
        if (str.indexOf("<") === -1)
            return;
        var start;
        var end;
        //ERASE HEADER OF XML
        if ((start = str.indexOf("<?xml")) !== -1) {
            end = str.indexOf("?>", start);
            if (end !== -1)
                str = str.substr(end + 2);
        }
        //ERASE COMMENTS
        while ((start = str.indexOf("<!--")) !== -1) {
            end = str.indexOf("-->", start);
            if (end === -1)
                break;
            str = str.substr(0, start) + str.substr(end + 3);
        }
        // ERASE !DOCTYPE
        start = str.indexOf("<!DOCTYPE");
        if (start !== -1) {
            var open_cnt = 1;
            var close_cnt = 0;
            for (var i = start + 1; i < str.length; ++i) {
                var ch = str.charAt(i);
                if (ch === "<")
                    ++open_cnt;
                else if (ch === ">") {
                    ++close_cnt;
                    end = i;
                    if (open_cnt === close_cnt)
                        break;
                }
            }
            if (open_cnt !== close_cnt)
                throw new exception_1.DomainError("Invalid XML format was found on !DOCTYPE");
            str = str.substr(0, start) + str.substr(end + 1);
        }
        //BEGIN PARSING
        this._Parse(str);
    };
    /* -------------------------------------------------------------
        PARSERS
    ------------------------------------------------------------- */
    /**
     * @hidden
     */
    XML.prototype._Parse = function (str) {
        this._Parse_tag(str);
        this._Parse_properties(str);
        var res = this._Parse_value(str);
        if (res.second === true)
            this._Parse_children(res.first);
    };
    /**
     * @hidden
     */
    XML.prototype._Parse_tag = function (str) {
        var start = str.indexOf("<") + 1;
        var end = XML._Compute_min_index(str.indexOf(" ", start), str.indexOf("\r\n", start), str.indexOf("\n", start), str.indexOf("\t", start), str.indexOf(">", start), str.indexOf("/", start));
        if (start === 0 || end === -1)
            throw new exception_1.DomainError("Invalid XML format; unable to parse tag.");
        this.tag_ = str.substring(start, end);
    };
    /**
     * @hidden
     */
    XML.prototype._Parse_properties = function (str) {
        var start = str.indexOf("<" + this.tag_) + this.tag_.length + 1;
        var end = XML._Compute_min_index(str.lastIndexOf("/"), str.indexOf(">", start));
        if (start === -1 || end === -1 || start >= end)
            return;
        //<comp label='ABCD' /> : " label='ABCD' "
        var line = str.substring(start, end);
        if (line.indexOf("=") === -1)
            return;
        var label;
        var value;
        var helpers = [];
        var inQuote = false;
        var quoteType;
        var equal;
        //INDEXING
        for (var i = 0; i < line.length; ++i) {
            //Start of quote
            if (inQuote === false && (line.charAt(i) === "'" || line.charAt(i) === "\"")) {
                inQuote = true;
                start = i;
                if (line.charAt(i) === "'")
                    quoteType = 1;
                else if (line.charAt(i) === "\"")
                    quoteType = 2;
            }
            else if (inQuote === true &&
                ((quoteType === 1 && line.charAt(i) === "'") ||
                    (quoteType === 2 && line.charAt(i) === "\""))) {
                helpers.push({ type: quoteType, start: start, end: i });
                inQuote = false;
            }
        }
        //CONSTRUCTING
        for (var i = 0; i < helpers.length; ++i) {
            if (i === 0) {
                equal = line.indexOf("=");
                label = line.substring(0, equal).trim();
            }
            else {
                equal = line.indexOf("=", helpers[i - 1].end + 1);
                label = line.substring(helpers[i - 1].end + 1, equal).trim();
            }
            value = line.substring(helpers[i].start + 1, helpers[i].end);
            this.setProperty(label, XML.decode_property(value));
        }
    };
    /**
     * @hidden
     */
    XML.prototype._Parse_value = function (str) {
        var end_slash = str.lastIndexOf("/");
        var end_block = str.indexOf(">");
        if (end_slash < end_block || end_slash + 1 === str.lastIndexOf("<")) {
            //STATEMENT1: <TAG />
            //STATEMENT2: <TAG></TAG> -> SAME WITH STATEMENT1: <TAG />
            this.value_ = "";
            return new Pair_1.Pair(str, false);
        }
        var start = end_block + 1;
        var end = str.lastIndexOf("<");
        str = str.substring(start, end); //REDEFINE WEAK_STRING -> IN TO THE TAG
        if (str.indexOf("<") === -1)
            this.value_ = XML.decode_value(str.trim());
        else
            this.value_ = "";
        return new Pair_1.Pair(str, true);
    };
    /**
     * @hidden
     */
    XML.prototype._Parse_children = function (str) {
        if (str.indexOf("<") === -1)
            return;
        var start = str.indexOf("<");
        var end = str.lastIndexOf(">") + 1;
        str = str.substring(start, end);
        var blockStart = 0;
        var blockEnd = 0;
        start = 0;
        for (var i = 0; i < str.length; ++i) {
            if (str.charAt(i) === "<" && str.substr(i, 2) !== "</")
                ++blockStart;
            else if (str.substr(i, 2) === "/>" || str.substr(i, 2) === "</")
                ++blockEnd;
            if (blockStart >= 1 && blockStart === blockEnd) {
                end = str.indexOf(">", i);
                var xmlList = void 0;
                var xml = new XML();
                xml._Parse(str.substring(start, end + 1));
                if (this.has(xml.tag_) === true)
                    xmlList = this.get(xml.tag_);
                else {
                    xmlList = new XMLList_1.XMLList();
                    this.set(xml.tag_, xmlList);
                }
                xmlList.push(xml);
                i = end;
                start = end + 1;
                blockStart = 0;
                blockEnd = 0;
            }
        }
    };
    /* =============================================================
        ACCESSORS
            - GETTERS
            - SETTERS
            - ELEMENTS I/O
    ================================================================
        GETTERS
    ------------------------------------------------------------- */
    XML.prototype.getTag = function () {
        return this.tag_;
    };
    XML.prototype.getValue = function () {
        return this.value_;
    };
    XML.prototype.findProperty = function (key) {
        return this.property_map_.find(key);
    };
    XML.prototype.hasProperty = function (key) {
        return this.property_map_.has(key);
    };
    XML.prototype.getProperty = function (key) {
        return this.property_map_.get(key);
    };
    XML.prototype.getPropertyMap = function () {
        return this.property_map_;
    };
    /* -------------------------------------------------------------
        SETTERS
    ------------------------------------------------------------- */
    XML.prototype.setTag = function (val) {
        this.tag_ = val;
    };
    XML.prototype.setValue = function (val) {
        this.value_ = val;
    };
    XML.prototype.insertValue = function (tag, value) {
        var xml = new XML();
        xml.setTag(tag);
        xml.setValue(value);
        this.push(xml);
        return xml;
    };
    XML.prototype.setProperty = function (key, value) {
        this.property_map_.set(key, value);
    };
    XML.prototype.eraseProperty = function (key) {
        var it = this.property_map_.find(key);
        if (it.equals(this.property_map_.end()) === true)
            throw new exception_1.OutOfRange("Unable to find the matched key.");
        this.property_map_.erase(it);
    };
    XML.prototype.push = function () {
        var e_3, _a;
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        try {
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var elem = items_1_1.value;
                if (elem instanceof XML)
                    if (this.has(elem.tag_) === true)
                        this.get(elem.tag_).push(elem);
                    else {
                        var xmlList = new XMLList_1.XMLList();
                        xmlList.push(elem);
                        this.set(elem.tag_, xmlList);
                    }
                else if (elem instanceof XMLList_1.XMLList)
                    if (elem.empty() === true)
                        continue;
                    else if (this.has(elem.getTag()) === true) {
                        var xmlList = this.get(elem.getTag());
                        xmlList.insert(xmlList.end(), elem.begin(), elem.end());
                    }
                    else
                        this.set(elem.getTag(), elem);
                else
                    _super.prototype.push.call(this, elem);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return this.size();
    };
    XML.prototype._Handle_insert = function (first, last) {
        var e_4, _a;
        for (var it = first; !it.equals(last); it = it.next()) {
            var tag = it.first;
            var xmlList = it.second;
            try {
                for (var xmlList_1 = (e_4 = void 0, __values(xmlList)), xmlList_1_1 = xmlList_1.next(); !xmlList_1_1.done; xmlList_1_1 = xmlList_1.next()) {
                    var xml = xmlList_1_1.value;
                    if (xml.getTag() !== tag)
                        xml.setTag(tag);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (xmlList_1_1 && !xmlList_1_1.done && (_a = xmlList_1.return)) _a.call(xmlList_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        _super.prototype._Handle_insert.call(this, first, last);
    };
    /* -------------------------------------------------------------
        STRING UTILS
    ------------------------------------------------------------- */
    XML.prototype.toString = function (tab) {
        var e_5, _a, e_6, _b;
        if (tab === void 0) { tab = 0; }
        var str = XML._Repeat("\t", tab) + "<" + this.tag_;
        try {
            //PROPERTIES
            for (var _c = __values(this.property_map_), _d = _c.next(); !_d.done; _d = _c.next()) {
                var entry = _d.value;
                str += " " + entry.first + "=\"" + XML.encode_property(entry.second) + "\"";
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        if (this.size() === 0) {
            // VALUE
            if (this.value_ !== "")
                str += ">" + XML.encode_value(this.value_) + "</" + this.tag_ + ">";
            else
                str += " />";
        }
        else {
            // CHILDREN
            str += ">\n";
            try {
                for (var _e = __values(this), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var entry = _f.value;
                    str += entry.second.toString(tab + 1);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
            str += XML._Repeat("\t", tab) + "</" + this.tag_ + ">";
        }
        return str;
    };
    /**
     * @hidden
     */
    XML._Compute_min_index = function () {
        var e_7, _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var min = -1;
        try {
            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var elem = args_1_1.value;
                if (elem === -1)
                    continue;
                else if (min === -1 || elem < min)
                    min = elem;
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return min;
    };
    /**
     * @hidden
     */
    XML._Repeat = function (str, n) {
        var ret = "";
        for (var i = 0; i < n; ++i)
            ret += str;
        return ret;
    };
    return XML;
}(HashMap_1.HashMap));
exports.XML = XML;
(function (XML) {
    function head(encoding) {
        if (encoding === void 0) { encoding = "utf-8"; }
        return "<?xml version=\"1.0\" encoding=\"" + encoding + "\" ?>";
    }
    XML.head = head;
    function encode_value(str) {
        var e_8, _a;
        try {
            for (var VALUE_CODES_1 = __values(VALUE_CODES), VALUE_CODES_1_1 = VALUE_CODES_1.next(); !VALUE_CODES_1_1.done; VALUE_CODES_1_1 = VALUE_CODES_1.next()) {
                var p = VALUE_CODES_1_1.value;
                str = str.split(p.first).join(p.second);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (VALUE_CODES_1_1 && !VALUE_CODES_1_1.done && (_a = VALUE_CODES_1.return)) _a.call(VALUE_CODES_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return str;
    }
    XML.encode_value = encode_value;
    function encode_property(str) {
        var e_9, _a;
        try {
            for (var PROPERTY_CODES_1 = __values(PROPERTY_CODES), PROPERTY_CODES_1_1 = PROPERTY_CODES_1.next(); !PROPERTY_CODES_1_1.done; PROPERTY_CODES_1_1 = PROPERTY_CODES_1.next()) {
                var p = PROPERTY_CODES_1_1.value;
                str = str.split(p.first).join(p.second);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (PROPERTY_CODES_1_1 && !PROPERTY_CODES_1_1.done && (_a = PROPERTY_CODES_1.return)) _a.call(PROPERTY_CODES_1);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return str;
    }
    XML.encode_property = encode_property;
    function decode_value(str) {
        var e_10, _a;
        try {
            for (var VALUE_CODES_2 = __values(VALUE_CODES), VALUE_CODES_2_1 = VALUE_CODES_2.next(); !VALUE_CODES_2_1.done; VALUE_CODES_2_1 = VALUE_CODES_2.next()) {
                var p = VALUE_CODES_2_1.value;
                str = str.split(p.second).join(p.first);
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (VALUE_CODES_2_1 && !VALUE_CODES_2_1.done && (_a = VALUE_CODES_2.return)) _a.call(VALUE_CODES_2);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return str;
    }
    XML.decode_value = decode_value;
    function decode_property(str) {
        var e_11, _a;
        try {
            for (var PROPERTY_CODES_2 = __values(PROPERTY_CODES), PROPERTY_CODES_2_1 = PROPERTY_CODES_2.next(); !PROPERTY_CODES_2_1.done; PROPERTY_CODES_2_1 = PROPERTY_CODES_2.next()) {
                var p = PROPERTY_CODES_2_1.value;
                str = str.split(p.second).join(p.first);
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (PROPERTY_CODES_2_1 && !PROPERTY_CODES_2_1.done && (_a = PROPERTY_CODES_2.return)) _a.call(PROPERTY_CODES_2);
            }
            finally { if (e_11) throw e_11.error; }
        }
        return str;
    }
    XML.decode_property = decode_property;
    /**
     * @hidden
     */
    var VALUE_CODES = [
        new Pair_1.Pair("&", "&amp;"),
        new Pair_1.Pair("<", "&lt;"),
        new Pair_1.Pair(">", "&gt;")
    ];
    /**
     * @hidden
     */
    var PROPERTY_CODES = __spread(VALUE_CODES, [
        new Pair_1.Pair("\"", "&quot;"),
        new Pair_1.Pair("'", "&apos;"),
        new Pair_1.Pair("\t", "&#x9;"),
        new Pair_1.Pair("\n", "&#xA;"),
        new Pair_1.Pair("\r", "&#xD;")
    ]);
})(XML = exports.XML || (exports.XML = {}));
exports.XML = XML;
//# sourceMappingURL=XML.js.map