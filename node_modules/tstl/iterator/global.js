"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LogicError_1 = require("../exception/LogicError");
function empty(source) {
    if (source instanceof Array)
        return source.length === 0;
    else
        return source.empty();
}
exports.empty = empty;
function size(source) {
    if (source instanceof Array)
        return source.length;
    else
        return source.size();
}
exports.size = size;
/**
 * Get distance between two iterators.
 *
 * @param first Input iteartor of the first position.
 * @param last Input iterator of the last position.
 *
 * @return The distance.
 */
function distance(first, last) {
    if (first.index !== undefined)
        return _Distance_via_index(first, last);
    var ret = 0;
    for (; !first.equals(last); first = first.next())
        ++ret;
    return ret;
}
exports.distance = distance;
/**
 * @hidden
 */
function _Distance_via_index(first, last) {
    var start = first.index();
    var end = last.index();
    if (first.base instanceof Function)
        return start - end;
    else
        return end - start;
}
/* ---------------------------------------------------------
    ACCESSORS
--------------------------------------------------------- */
/**
 * Advance iterator.
 *
 * @param it Target iterator to advance.
 * @param n Step to advance.
 *
 * @return The advanced iterator.
 */
function advance(it, n) {
    if (it.advance instanceof Function)
        it = it.advance(n);
    else if (n > 0)
        for (var i = 0; i < n; ++i)
            it = it.next();
    else {
        var p_it = it;
        if (!(p_it.prev instanceof Function))
            throw new LogicError_1.InvalidArgument("Error on std.advance(): parametric iterator is not a bi-directional iterator, thus advancing to negative direction is not possible.");
        n = -n;
        for (var i = 0; i < n; ++i)
            p_it = p_it.prev();
        it = p_it;
    }
    return it;
}
exports.advance = advance;
/**
 * Get previous iterator.
 *
 * @param it Iterator to move.
 * @param n Step to move prev.
 * @return An iterator moved to prev *n* steps.
 */
function prev(it, n) {
    if (n === void 0) { n = 1; }
    if (n === 1)
        return it.prev();
    else
        return advance(it, -n);
}
exports.prev = prev;
/**
 * Get next iterator.
 *
 * @param it Iterator to move.
 * @param n Step to move next.
 * @return Iterator moved to next *n* steps.
 */
function next(it, n) {
    if (n === void 0) { n = 1; }
    if (n === 1)
        return it.next();
    else
        return advance(it, n);
}
exports.next = next;
//# sourceMappingURL=global.js.map