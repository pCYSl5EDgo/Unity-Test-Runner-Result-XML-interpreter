/** @module std */
import { MultiTreeSet } from "../base/container/MultiTreeSet";
import { IForwardIterator } from "../iterator/IForwardIterator";
import { SetElementList } from "../base/container/SetElementList";
/**
 * Multiple-key Set based on Tree.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class TreeMultiSet<Key> extends MultiTreeSet<Key, TreeMultiSet<Key>, TreeMultiSet.Iterator<Key>, TreeMultiSet.ReverseIterator<Key>> {
    /**
     * @hidden
     */
    private tree_;
    /**
     * Default Constructor.
     *
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(comp?: (x: Key, y: Key) => boolean);
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(items: Key[], comp?: (x: Key, y: Key) => boolean);
    /**
     * Copy Constructor.
     *
     * @param obj Object to copy.
     */
    constructor(obj: TreeMultiSet<Key>);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(first: Readonly<IForwardIterator<Key>>, last: Readonly<IForwardIterator<Key>>, comp?: (x: Key, y: Key) => boolean);
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    swap(obj: TreeMultiSet<Key>): void;
    /**
     * @inheritDoc
     */
    key_comp(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    lower_bound(key: Key): TreeMultiSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    upper_bound(key: Key): TreeMultiSet.Iterator<Key>;
    /**
     * @hidden
     */
    protected _Handle_insert(first: TreeMultiSet.Iterator<Key>, last: TreeMultiSet.Iterator<Key>): void;
    /**
     * @hidden
     */
    protected _Handle_erase(first: TreeMultiSet.Iterator<Key>, last: TreeMultiSet.Iterator<Key>): void;
}
export declare namespace TreeMultiSet {
    type Iterator<Key> = SetElementList.Iterator<Key, false, TreeMultiSet<Key>>;
    type ReverseIterator<Key> = SetElementList.ReverseIterator<Key, false, TreeMultiSet<Key>>;
    const Iterator: typeof SetElementList.Iterator;
    const ReverseIterator: typeof SetElementList.ReverseIterator;
    type iterator<Key> = Iterator<Key>;
    type reverse_iterator<Key> = ReverseIterator<Key>;
    const iterator: typeof SetElementList.Iterator;
    const reverse_iterator: typeof SetElementList.ReverseIterator;
}
export import multiset = TreeMultiSet;
//# sourceMappingURL=TreeMultiSet.d.ts.map