/** @module std */
import { IForwardContainer } from "../base/disposable/IForwardContainer";
import { IForwardIterator } from "../iterator/IForwardIterator";
import { _IClear, _IEmpty, _ISize } from "../base/disposable/IPartialContainers";
import { _IDeque } from "../base/container/IDequeContainer";
import { _IFront } from "../base/container/ILinearContainer";
import { _IListAlgorithm } from "../base/disposable/IListAlgorithm";
/**
 * Singly Linked List.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class ForwardList<T> implements IForwardContainer<ForwardList.Iterator<T>>, _IClear, _IEmpty, _ISize, _IDeque<T>, _IFront<T>, Iterable<T>, _IListAlgorithm<T, ForwardList<T>> {
    /**
     * @hidden
     */
    private ptr_;
    /**
     * @hidden
     */
    private size_;
    /**
     * @hidden
     */
    private before_begin_;
    /**
     * @hidden
     */
    private end_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     */
    constructor(items: T[]);
    /**
     * Copy Constructor
     *
     * @param obj Object to copy.
     */
    constructor(obj: ForwardList<T>);
    /**
     * Fill Constructor.
     *
     * @param size Initial size.
     * @param val Value to fill.
     */
    constructor(n: number, val: T);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     */
    constructor(first: Readonly<IForwardIterator<T>>, last: Readonly<IForwardIterator<T>>);
    /**
     * Fill Assigner.
     *
     * @param n Initial size.
     * @param val Value to fill.
     */
    assign(n: number, val: T): void;
    /**
     * Range Assigner.
     *
     * @param first Input iteartor of the first position.
     * @param last Input iterator of the last position.
     */
    assign<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * @inheritDoc
     */
    empty(): boolean;
    /**
     * @inheritDoc
     */
    front(): T;
    /**
     * @inheritDoc
     */
    front(val: T): void;
    /**
     * Iterator to before beginning.
     *
     * @return Iterator to the before beginning.
     */
    before_begin(): ForwardList.Iterator<T>;
    /**
     * @inheritDoc
     */
    begin(): ForwardList.Iterator<T>;
    /**
     * @inheritDoc
     */
    end(): ForwardList.Iterator<T>;
    /**
     * @inheritDoc
     */
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * @inheritDoc
     */
    push_front(val: T): void;
    /**
     * Insert an element.
     *
     * @param pos Position to insert after.
     * @param val Value to insert.
     * @return An iterator to the newly inserted element.
     */
    insert_after(pos: ForwardList.Iterator<T>, val: T): ForwardList.Iterator<T>;
    /**
     * Inserted repeated elements.
     *
     * @param pos Position to insert after.
     * @param n Number of elements to insert.
     * @param val Value to insert repeatedly.
     * @return An iterator to the last of the newly inserted elements.
     */
    insert_after(pos: ForwardList.Iterator<T>, n: number, val: T): ForwardList.Iterator<T>;
    /**
     * Insert range elements.
     *
     * @param pos Position to insert after.
     * @param first Input iterator of the first position.
     * @param last Input iteartor of the last position.
     * @return An iterator to the last of the newly inserted elements.
     */
    insert_after<T, InputIterator extends Readonly<IForwardIterator<T, InputIterator>>>(pos: ForwardList.Iterator<T>, first: InputIterator, last: InputIterator): ForwardList.Iterator<T>;
    /**
     * @hidden
     */
    private _Insert_by_repeating_val;
    /**
     * @hidden
     */
    private _Insert_by_range;
    /**
     * @inheritDoc
     */
    pop_front(): void;
    /**
     * Erase an element.
     *
     * @param it Position to erase after.
     * @return Iterator to the erased element.
     */
    erase_after(it: ForwardList.Iterator<T>): ForwardList.Iterator<T>;
    /**
     * Erase elements.
     *
     * @param first Range of the first position to erase after.
     * @param last Rangee of the last position to erase.
     * @return Iterator to the last removed element.
     */
    erase_after(first: ForwardList.Iterator<T>, last: ForwardList.Iterator<T>): ForwardList.Iterator<T>;
    /**
     * @inheritDoc
     */
    unique(binary_pred?: (x: T, y: T) => boolean): void;
    /**
     * @inheritDoc
     */
    remove(val: T): void;
    /**
     * @inheritDoc
     */
    remove_if(pred: (val: T) => boolean): void;
    /**
     * @inheritDoc
     */
    merge(from: ForwardList<T>, comp?: (x: T, y: T) => boolean): void;
    /**
     * Transfer elements.
     *
     * @param pos Position to insert after.
     * @param from Target container to transfer.
     */
    splice_after(pos: ForwardList.Iterator<T>, from: ForwardList<T>): void;
    /**
     * Transfer a single element.
     *
     * @param pos Position to insert after.
     * @param from Target container to transfer.
     * @param before Previous position of the single element to transfer.
     */
    splice_after(pos: ForwardList.Iterator<T>, from: ForwardList<T>, before: ForwardList.Iterator<T>): void;
    /**
     * Transfer range elements.
     *
     * @param pos Position to insert after.
     * @param from Target container to transfer.
     * @param first Range of previous of the first position to transfer.
     * @param last Rangee of the last position to transfer.
     */
    splice_after(pos: ForwardList.Iterator<T>, from: ForwardList<T>, first_before: ForwardList.Iterator<T>, last: ForwardList.Iterator<T>): void;
    /**
     * @inheritDoc
     */
    sort(comp?: (x: T, y: T) => boolean): void;
    /**
     * @inheritDoc
     */
    reverse(): void;
    /**
     * @inheritDoc
     */
    swap(obj: ForwardList<T>): void;
    /**
     * Native function for `JSON.stringify()`.
     *
     * @return An array containing children elements.
     */
    toJSON(): Array<T>;
}
export declare namespace ForwardList {
    /**
     * Iterator of the ForwardList.
     *
     * @author Jeongho Nam <http://samchon.org>
     */
    class Iterator<T> implements IForwardIterator<T, Iterator<T>> {
        /**
         * @hidden
         */
        private source_ptr_;
        /**
         * @hidden
         */
        private next_;
        /**
         * @hidden
         */
        private value_;
        /**
         * @hidden
         */
        private constructor();
        /**
         * Get source container.
         *
         * @return The source container.
         */
        source(): ForwardList<T>;
        /**
         * @inheritDoc
         */
        /**
        * @inheritDoc
        */
        value: T;
        /**
         * @inheritDoc
         */
        next(): Iterator<T>;
        /**
         * @inheritDoc
         */
        equals(obj: Iterator<T>): boolean;
    }
}
export import forward_list = ForwardList;
//# sourceMappingURL=ForwardList.d.ts.map