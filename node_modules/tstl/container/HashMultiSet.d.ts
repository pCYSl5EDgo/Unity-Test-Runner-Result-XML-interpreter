/** @module std */
import { MultiSet } from "../base/container/MultiSet";
import { IHashSet } from "../base/container/IHashSet";
import { SetElementList } from "../base/container/SetElementList";
import { IForwardIterator } from "../iterator/IForwardIterator";
/**
 * Multiple-key Set based on Hash buckets.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class HashMultiSet<Key> extends MultiSet<Key, HashMultiSet<Key>, HashMultiSet.Iterator<Key>, HashMultiSet.ReverseIterator<Key>> implements IHashSet<Key, false, HashMultiSet<Key>> {
    /**
     * @hidden
     */
    private buckets_;
    /**
     * Default Constructor.
     *
     * @param hash An unary function returns hash code. Default is {hash}.
     * @param equal A binary function predicates two arguments are equal. Default is {@link equal_to}.
     */
    constructor(hash?: (key: Key) => number, equal?: (x: Key, y: Key) => boolean);
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     * @param hash An unary function returns hash code. Default is {hash}.
     * @param equal A binary function predicates two arguments are equal. Default is {@link equal_to}.
     */
    constructor(items: Key[], hash?: (key: Key) => number, equal?: (x: Key, y: Key) => boolean);
    /**
     * Copy Constructor.
     *
     * @param obj Object to copy.
     */
    constructor(obj: HashMultiSet<Key>);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     * @param hash An unary function returns hash code. Default is {hash}.
     * @param equal A binary function predicates two arguments are equal. Default is {@link equal_to}.
     */
    constructor(first: Readonly<IForwardIterator<Key>>, last: Readonly<IForwardIterator<Key>>, hash?: (key: Key) => number, equal?: (x: Key, y: Key) => boolean);
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    swap(obj: HashMultiSet<Key>): void;
    /**
     * @inheritDoc
     */
    find(key: Key): HashMultiSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    count(key: Key): number;
    /**
     * @inheritDoc
     */
    begin(): HashMultiSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    begin(index: number): HashMultiSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    end(): HashMultiSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    end(index: number): HashMultiSet.Iterator<Key>;
    /**
     * @inheritDoc
     */
    rbegin(): HashMultiSet.ReverseIterator<Key>;
    /**
     * @inheritDoc
     */
    rbegin(index: number): HashMultiSet.ReverseIterator<Key>;
    /**
     * @inheritDoc
     */
    rend(): HashMultiSet.ReverseIterator<Key>;
    /**
     * @inheritDoc
     */
    rend(index: number): HashMultiSet.ReverseIterator<Key>;
    /**
     * @inheritDoc
     */
    bucket_count(): number;
    /**
     * @inheritDoc
     */
    bucket_size(n: number): number;
    /**
     * @inheritDoc
     */
    load_factor(): number;
    /**
     * @inheritDoc
     */
    hash_function(): (key: Key) => number;
    /**
     * @inheritDoc
     */
    key_eq(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    bucket(key: Key): number;
    /**
     * @inheritDoc
     */
    max_load_factor(): number;
    /**
     * @inheritDoc
     */
    max_load_factor(z: number): void;
    /**
     * @inheritDoc
     */
    reserve(n: number): void;
    /**
     * @inheritDoc
     */
    rehash(n: number): void;
    /**
     * @hidden
     */
    protected _Key_eq(x: Key, y: Key): boolean;
    /**
     * @hidden
     */
    protected _Insert_by_key(key: Key): HashMultiSet.Iterator<Key>;
    /**
     * @hidden
     */
    protected _Insert_by_hint(hint: HashMultiSet.Iterator<Key>, key: Key): HashMultiSet.Iterator<Key>;
    /**
     * @hidden
     */
    protected _Insert_by_range<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @hidden
     */
    protected _Handle_insert(first: HashMultiSet.Iterator<Key>, last: HashMultiSet.Iterator<Key>): void;
    /**
     * @hidden
     */
    protected _Handle_erase(first: HashMultiSet.Iterator<Key>, last: HashMultiSet.Iterator<Key>): void;
}
export declare namespace HashMultiSet {
    type Iterator<Key> = SetElementList.Iterator<Key, false, HashMultiSet<Key>>;
    type ReverseIterator<Key> = SetElementList.ReverseIterator<Key, false, HashMultiSet<Key>>;
    const Iterator: typeof SetElementList.Iterator;
    const ReverseIterator: typeof SetElementList.ReverseIterator;
    type iterator<Key> = Iterator<Key>;
    type reverse_iterator<Key> = ReverseIterator<Key>;
    const iterator: typeof SetElementList.Iterator;
    const reverse_iterator: typeof SetElementList.ReverseIterator;
}
export import unordered_multiset = HashMultiSet;
//# sourceMappingURL=HashMultiSet.d.ts.map