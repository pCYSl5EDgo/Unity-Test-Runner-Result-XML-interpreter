/** @module std */
import { VectorContainer } from "../base/container/VectorContainer";
import { ArrayIterator, ArrayReverseIterator } from "../base/iterator/ArrayIterator";
import { IForwardIterator } from "../iterator/IForwardIterator";
/**
 * Vector, an array with variable capacity.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class Vector<T> extends VectorContainer<T, Vector<T>, Vector<T>, Vector.Iterator<T>, Vector.ReverseIterator<T>, T> {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     */
    constructor(items: Array<T>);
    /**
     * Copy Constructor
     *
     * @param obj Object to copy.
     */
    constructor(obj: Vector<T>);
    /**
     * Fill Constructor.
     *
     * @param size Initial size.
     * @param val Value to fill.
     */
    constructor(n: number, val: T);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iteartor of the last position.
     */
    constructor(first: Readonly<IForwardIterator<T>>, last: Readonly<IForwardIterator<T>>);
    /**
     * Wrap an array into a vector.
     *
     * @param data Target array to be wrapped
     * @return A vector wrapping the parametric array.
     */
    static wrap<T>(data: Array<T>): Vector<T>;
    /**
     * @hidden
     */
    nth(index: number): Vector.Iterator<T>;
}
export declare namespace Vector {
    type Iterator<T> = ArrayIterator<T, Vector<T>>;
    type ReverseIterator<T> = ArrayReverseIterator<T, Vector<T>>;
    const Iterator: typeof ArrayIterator;
    const ReverseIterator: typeof ArrayReverseIterator;
    type iterator<T> = Iterator<T>;
    type reverse_iterator<T> = ReverseIterator<T>;
    const iterator: typeof ArrayIterator;
    const reverse_iterator: typeof ArrayReverseIterator;
}
export import vector = Vector;
//# sourceMappingURL=Vector.d.ts.map