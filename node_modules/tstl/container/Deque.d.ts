/** @module std */
import { ArrayContainer } from "../base/container/ArrayContainer";
import { ArrayIterator, ArrayReverseIterator } from "../base/iterator/ArrayIterator";
import { IForwardIterator } from "../iterator/IForwardIterator";
/**
 * Double ended queue.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class Deque<T> extends ArrayContainer<T, Deque<T>, Deque<T>, Deque.Iterator<T>, Deque.ReverseIterator<T>, T> {
    /**
     * @hidden
     */
    private matrix_;
    /**
     * @hidden
     */
    private size_;
    /**
     * @hidden
     */
    private capacity_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     */
    constructor(items: T[]);
    /**
     * Copy Constructor
     *
     * @param obj Object to copy.
     */
    constructor(obj: Deque<T>);
    /**
     * Fill Constructor.
     *
     * @param size Initial size.
     * @param val Value to fill.
     */
    constructor(size: number, val: T);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     */
    constructor(first: Readonly<IForwardIterator<T>>, last: Readonly<IForwardIterator<T>>);
    /**
     * @inheritDoc
     */
    assign(n: number, val: T): void;
    /**
     * @inheritDoc
     */
    assign<InputIterator extends Readonly<IForwardIterator<T, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * Reserve {@link capacity} enable to store *n* elements.
     *
     * @param n The capacity to reserve.
     */
    reserve(n: number): void;
    /**
     * @inheritDoc
     */
    resize(n: number): void;
    /**
     * Shrink {@link capacity} to actual {@link size}.
     */
    shrink_to_fit(): void;
    /**
     * @inheritDoc
     */
    swap(obj: Deque<T>): void;
    /**
     * @hidden
     */
    private _Swap;
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * The capacity to store elements.
     *
     * @return The capacity.
     */
    capacity(): number;
    /**
     * @hidden
     */
    nth(index: number): Deque.Iterator<T>;
    /**
     * @inheritDoc
     */
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * @inheritDoc
     */
    at(index: number): T;
    /**
     * @inheritDoc
     */
    set(index: number, val: T): void;
    /**
     * @hidden
     */
    private _Fetch_index;
    /**
     * @hidden
     */
    private _Compute_col_size;
    /**
     * @inheritDoc
     */
    push(...items: T[]): number;
    /**
     * @inheritDoc
     */
    push_front(val: T): void;
    /**
     * @inheritDoc
     */
    push_back(val: T): void;
    /**
     * @inheritDoc
     */
    pop_front(): void;
    /**
     * @inheritDoc
     */
    pop_back(): void;
    /**
     * @hidden
     */
    protected _Insert_by_range<InputIterator extends Readonly<IForwardIterator<T, InputIterator>>>(pos: Deque.Iterator<T>, first: InputIterator, last: InputIterator): Deque.Iterator<T>;
    /**
     * @hidden
     */
    private _Insert_to_middle;
    /**
     * @hidden
     */
    private _Insert_to_end;
    /**
     * @hidden
     */
    private _Try_expand_capacity;
    /**
     * @hidden
     */
    private _Try_add_row_at_front;
    /**
     * @hidden
     */
    private _Try_add_row_at_back;
    /**
     * @hidden
     */
    protected _Erase_by_range(first: Deque.Iterator<T>, last: Deque.Iterator<T>): Deque.Iterator<T>;
    /**
     * @hidden
     */
    private static readonly ROW_SIZE;
    /**
     * @hidden
     */
    private static readonly MIN_CAPACITY;
    /**
     * @hidden
     */
    private static readonly MAGNIFIER;
}
export declare namespace Deque {
    type Iterator<T> = ArrayIterator<T, Deque<T>>;
    type ReverseIterator<T> = ArrayReverseIterator<T, Deque<T>>;
    const Iterator: typeof ArrayIterator;
    const ReverseIterator: typeof ArrayReverseIterator;
    type iterator<T> = Iterator<T>;
    type reverse_iterator<T> = ReverseIterator<T>;
    const iterator: typeof ArrayIterator;
    const reverse_iterator: typeof ArrayReverseIterator;
}
export import deque = Deque;
//# sourceMappingURL=Deque.d.ts.map