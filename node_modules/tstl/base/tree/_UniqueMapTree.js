"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std.base */
//================================================================
var _MapTree_1 = require("./_MapTree");
/**
 * @hidden
 */
var _UniqueMapTree = /** @class */ (function (_super) {
    __extends(_UniqueMapTree, _super);
    /* ---------------------------------------------------------
        CONSTRUCTOR
    --------------------------------------------------------- */
    function _UniqueMapTree(source, comp) {
        return _super.call(this, source, comp, function (x, y) {
            return comp(x.first, y.first);
        }) || this;
    }
    /* ---------------------------------------------------------
        FINDERS
    --------------------------------------------------------- */
    _UniqueMapTree.prototype.nearest_by_key = function (key) {
        // NEED NOT TO ITERATE
        if (this.root_ === null)
            return null;
        //----
        // ITERATE
        //----
        var ret = this.root_;
        while (true) // UNTIL MEET THE MATCHED VALUE OR FINAL BRANCH
         {
            var it = ret.value;
            var my_node = null;
            // COMPARE
            if (this.key_comp()(key, it.first))
                my_node = ret.left;
            else if (this.key_comp()(it.first, key))
                my_node = ret.right;
            else
                return ret; // MATCHED VALUE
            // FINAL BRANCH? OR KEEP GOING
            if (my_node === null)
                break;
            else
                ret = my_node;
        }
        return ret; // DIFFERENT NODE
    };
    _UniqueMapTree.prototype.upper_bound = function (key) {
        // FIND MATCHED NODE
        var node = this.nearest_by_key(key);
        if (node === null)
            return this.source().end();
        // MUST BE it.first > key
        var it = node.value;
        if (this.key_comp()(key, it.first))
            return it;
        else
            return it.next();
    };
    return _UniqueMapTree;
}(_MapTree_1._MapTree));
exports._UniqueMapTree = _UniqueMapTree;
//# sourceMappingURL=_UniqueMapTree.js.map