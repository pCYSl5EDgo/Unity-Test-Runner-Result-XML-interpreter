/** @module std.base */
import { _XTreeNode } from "./_XTreeNode";
/**
 * @hidden
 */
export declare abstract class _XTree<T> {
    protected root_: _XTreeNode<T> | null;
    private comp_;
    private equal_;
    protected constructor(comp: (x: T, y: T) => boolean);
    clear(): void;
    root(): _XTreeNode<T> | null;
    get(val: T): _XTreeNode<T> | null;
    nearest(val: T): _XTreeNode<T> | null;
    protected _Fetch_maximum(node: _XTreeNode<T>): _XTreeNode<T>;
    insert(val: T): void;
    private _Insert_case1;
    private _Insert_case2;
    private _Insert_case3;
    private _Insert_case4;
    private _Insert_case5;
    erase(val: T): void;
    private _Erase_case1;
    private _Erase_case2;
    private _Erase_case3;
    private _Erase_case4;
    private _Erase_case5;
    private _Erase_case6;
    protected _Rotate_left(node: _XTreeNode<T>): void;
    protected _Rotate_right(node: _XTreeNode<T>): void;
    protected _Replace_node(oldNode: _XTreeNode<T>, newNode: _XTreeNode<T> | null): void;
    private _Fetch_color;
}
//# sourceMappingURL=_XTree.d.ts.map