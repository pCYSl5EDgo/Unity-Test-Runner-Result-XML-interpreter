/** @module std.base */
import { _XTree } from "./_XTree";
import { _XTreeNode } from "./_XTreeNode";
import { SetContainer } from "../container/SetContainer";
import { SetElementList } from "../container/SetElementList";
import { Pair } from "../../utility/Pair";
/**
 * @hidden
 */
export declare abstract class _SetTree<Key, Unique extends boolean, Source extends SetContainer<Key, Unique, Source, SetElementList.Iterator<Key, Unique, Source>, SetElementList.ReverseIterator<Key, Unique, Source>>> extends _XTree<SetElementList.Iterator<Key, Unique, Source>> {
    private source_;
    private key_comp_;
    private key_eq_;
    constructor(set: Source, comp: (x: Key, y: Key) => boolean, it_comp: (x: SetElementList.Iterator<Key, Unique, Source>, y: SetElementList.Iterator<Key, Unique, Source>) => boolean);
    get_by_key(val: Key): _XTreeNode<SetElementList.Iterator<Key, Unique, Source>> | null;
    abstract nearest_by_key(val: Key): _XTreeNode<SetElementList.Iterator<Key, Unique, Source>> | null;
    lower_bound(val: Key): SetElementList.Iterator<Key, Unique, Source>;
    abstract upper_bound(val: Key): SetElementList.Iterator<Key, Unique, Source>;
    equal_range(val: Key): Pair<SetElementList.Iterator<Key, Unique, Source>, SetElementList.Iterator<Key, Unique, Source>>;
    source(): Source;
    key_comp(): (x: Key, y: Key) => boolean;
    key_eq(): (x: Key, y: Key) => boolean;
    value_comp(): (x: Key, y: Key) => boolean;
}
//# sourceMappingURL=_SetTree.d.ts.map