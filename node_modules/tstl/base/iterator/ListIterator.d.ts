/** @module std.base */
import { IContainer } from "../container/IContainer";
import { Iterator } from "./Iterator";
import { ReverseIterator } from "./ReverseIterator";
/**
 * Basic List Iterator.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class ListIterator<T extends Elem, SourceT extends IContainer<T, SourceT, IteratorT, ReverseIteratorT, Elem>, IteratorT extends ListIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, ReverseIteratorT extends ReverseIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, Elem> implements Readonly<Iterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>> {
    /**
     * @hidden
     */
    private prev_;
    /**
     * @hidden
     */
    private next_;
    /**
     * @hidden
     */
    protected value_: T;
    /**
     * @hidden
     */
    protected constructor(prev: IteratorT, next: IteratorT, value: T);
    /**
     * @inheritDoc
     */
    abstract reverse(): ReverseIteratorT;
    /**
     * @inheritDoc
     */
    abstract source(): SourceT;
    /**
     * @inheritDoc
     */
    prev(): IteratorT;
    /**
     * @inheritDoc
     */
    next(): IteratorT;
    /**
     * @inheritDoc
     */
    readonly value: T;
    /**
     * @inheritDoc
     */
    equals(obj: IteratorT): boolean;
}
//# sourceMappingURL=ListIterator.d.ts.map