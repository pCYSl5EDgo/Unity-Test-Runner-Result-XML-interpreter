/** @module std.base */
import { Iterator } from "./Iterator";
import { ReverseIterator } from "./ReverseIterator";
import { IContainer } from "../container/IContainer";
import { IRandomAccessIterator } from "../../iterator/IRandomAccessIterator";
import { ArrayContainer } from "../container/ArrayContainer";
/**
 * Iterator of Array Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class ArrayIteratorBase<T extends ElemT, SourceT extends IContainer<T, SourceT, IteratorT, ReverseT, ElemT>, ArrayT extends ArrayContainer<T, SourceT, ArrayT, IteratorT, ReverseT, ElemT>, IteratorT extends ArrayIteratorBase<T, SourceT, ArrayT, IteratorT, ReverseT, ElemT>, ReverseT extends ArrayReverseIteratorBase<T, SourceT, ArrayT, IteratorT, ReverseT, ElemT>, ElemT> implements Iterator<T, SourceT, IteratorT, ReverseT, ElemT>, IRandomAccessIterator<T, IteratorT> {
    /**
     * @hidden
     */
    private array_;
    /**
     * @hidden
     */
    private index_;
    /**
     * Initializer Constructor.
     *
     * @param source Source container.
     * @param index Index number.
     */
    constructor(array: ArrayT, index: number);
    /**
     * @inheritDoc
     */
    abstract reverse(): ReverseT;
    /**
     * @inheritDoc
     */
    abstract source(): SourceT;
    /**
     * @inheritDoc
     */
    index(): number;
    /**
     * @inheritDoc
     */
    /**
    * @inheritDoc
    */
    value: T;
    /**
     * @inheritDoc
     */
    prev(): IteratorT;
    /**
     * @inheritDoc
     */
    next(): IteratorT;
    /**
     * @inheritDoc
     */
    advance(n: number): IteratorT;
    /**
     * @inheritDoc
     */
    equals(obj: IteratorT): boolean;
}
/**
 * Reverse iterator of Array Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class ArrayReverseIteratorBase<T extends ElemT, SourceT extends IContainer<T, SourceT, IteratorT, ReverseT, ElemT>, ArrayT extends ArrayContainer<T, SourceT, ArrayT, IteratorT, ReverseT, ElemT>, IteratorT extends ArrayIteratorBase<T, SourceT, ArrayT, IteratorT, ReverseT, ElemT>, ReverseT extends ArrayReverseIteratorBase<T, SourceT, ArrayT, IteratorT, ReverseT, ElemT>, ElemT> extends ReverseIterator<T, SourceT, IteratorT, ReverseT, ElemT> implements IRandomAccessIterator<T, ReverseT> {
    /**
     * @inheritDoc
     */
    advance(n: number): ReverseT;
    /**
     * @inheritDoc
     */
    index(): number;
    /**
     * @inheritDoc
     */
    /**
    * @inheritDoc
    */
    value: T;
}
//# sourceMappingURL=ArrayIteratorBase.d.ts.map