"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std.base */
//================================================================
/**
 * @hidden
 */
var MIN_BUCKET_COUNT = 10;
/**
 * @hidden
 */
var DEFAULT_MAX_FACTOR = 1.0;
/**
 * @hidden
 */
var _HashBuckets = /** @class */ (function () {
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    function _HashBuckets() {
        this.clear();
        this.max_load_factor_ = DEFAULT_MAX_FACTOR;
    }
    _HashBuckets.prototype.clear = function () {
        this.buckets_ = [];
        this.item_size_ = 0;
        for (var i = 0; i < MIN_BUCKET_COUNT; ++i)
            this.buckets_.push([]);
    };
    _HashBuckets.prototype.rehash = function (size) {
        var e_1, _a, e_2, _b;
        if (size < MIN_BUCKET_COUNT)
            size = MIN_BUCKET_COUNT;
        var prev_matrix = this.buckets_;
        this.buckets_ = [];
        for (var i = 0; i < size; ++i)
            this.buckets_.push([]);
        try {
            for (var prev_matrix_1 = __values(prev_matrix), prev_matrix_1_1 = prev_matrix_1.next(); !prev_matrix_1_1.done; prev_matrix_1_1 = prev_matrix_1.next()) {
                var row = prev_matrix_1_1.value;
                try {
                    for (var row_1 = (e_2 = void 0, __values(row)), row_1_1 = row_1.next(); !row_1_1.done; row_1_1 = row_1.next()) {
                        var col = row_1_1.value;
                        var index = this.hash_index(col);
                        var bucket = this.buckets_[index];
                        bucket.push(col);
                        ++this.item_size_;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (row_1_1 && !row_1_1.done && (_b = row_1.return)) _b.call(row_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (prev_matrix_1_1 && !prev_matrix_1_1.done && (_a = prev_matrix_1.return)) _a.call(prev_matrix_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    _HashBuckets.prototype.reserve = function (size) {
        this.item_size_ += size;
        if (this.item_size_ > this.capacity())
            this.rehash(Math.max(this.item_size_, this.capacity() * 2));
    };
    /* ---------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------- */
    _HashBuckets.prototype.size = function () {
        return this.buckets_.length;
    };
    _HashBuckets.prototype.capacity = function () {
        return this.buckets_.length * this.max_load_factor_;
    };
    _HashBuckets.prototype.at = function (index) {
        return this.buckets_[index];
    };
    _HashBuckets.prototype.load_factor = function () {
        return this.item_size_ / this.size();
    };
    _HashBuckets.prototype.max_load_factor = function (z) {
        if (z === void 0) { z = null; }
        if (z === null)
            return this.max_load_factor_;
        else
            this.max_load_factor_ = z;
    };
    /* ---------------------------------------------------------
        ELEMENTS I/O
    --------------------------------------------------------- */
    _HashBuckets.prototype.insert = function (val) {
        var capacity = this.capacity();
        if (++this.item_size_ > capacity)
            this.rehash(capacity * 2);
        var index = this.hash_index(val);
        this.buckets_[index].push(val);
    };
    _HashBuckets.prototype.erase = function (val) {
        var index = this.hash_index(val);
        var bucket = this.buckets_[index];
        for (var i = 0; i < bucket.length; ++i)
            if (bucket[i] === val) {
                bucket.splice(i, 1);
                --this.item_size_;
                break;
            }
    };
    return _HashBuckets;
}());
exports._HashBuckets = _HashBuckets;
//# sourceMappingURL=_HashBuckets.js.map