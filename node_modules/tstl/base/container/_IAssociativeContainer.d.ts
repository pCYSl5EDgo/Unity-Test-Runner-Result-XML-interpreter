/** @module std.base */
import { IContainer } from "./IContainer";
import { Iterator } from "../iterator/Iterator";
import { IReverseIterator } from "../iterator/ReverseIterator";
/**
 * @hidden
 */
export interface _IAssociativeContainer<Key, T extends Elem, SourceT extends _IAssociativeContainer<Key, T, SourceT, IteratorT, ReverseIteratorT, Elem>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, ReverseIteratorT extends IReverseIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, Elem> extends IContainer<T, SourceT, IteratorT, ReverseIteratorT, Elem> {
    /**
     * Get iterator to element.
     *
     * @param key Key to search for.
     * @return An iterator to the element, if the specified key is found, otherwise `this.end()`.
     */
    find(key: Key): IteratorT;
    /**
     * Test whether a key exists.
     *
     * @param key Key to search for.
     * @return Whether the specified key exists.
     */
    has(key: Key): boolean;
    /**
     * Count elements with a specified key.
     *
     * @param key Key to search for.
     * @return Number of elements with the specified key.
     */
    count(key: Key): number;
    /**
     * Erase elements with a specified key.
     *
     * @param key Key to search for.
     * @return Number of erased elements.
     */
    erase(key: Key): number;
    /**
     * @inheritDoc
     */
    erase(pos: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    erase(first: IteratorT, last: IteratorT): IteratorT;
}
/**
 * @hidden
 */
export declare function _Fetch_arguments<Key, T extends Elem, SourceT extends _IAssociativeContainer<Key, T, SourceT, IteratorT, ReverseIteratorT, Elem>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, ReverseIteratorT extends IReverseIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, Elem>(source: SourceT, ...args: any[]): {
    ramda: (() => void) | null;
    tail: any[];
};
//# sourceMappingURL=_IAssociativeContainer.d.ts.map