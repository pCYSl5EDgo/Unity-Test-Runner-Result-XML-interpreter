/** @module std.base */
import { _IAssociativeContainer } from "./_IAssociativeContainer";
import { Iterator } from "../iterator/Iterator";
import { IReverseIterator } from "../iterator/ReverseIterator";
/**
 * @hidden
 */
export interface _IHashContainer<Key, T extends Elem, SourceT extends _IHashContainer<Key, T, SourceT, IteratorT, ReverseIteratorT, Elem>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, ReverseIteratorT extends IReverseIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, Elem> extends _IAssociativeContainer<Key, T, SourceT, IteratorT, ReverseIteratorT, Elem> {
    /**
     * Get hash function.
     *
     * @return The hash function.
     */
    hash_function(): (key: Key) => number;
    /**
     * Get key equality predicator.
     *
     * @return The key equality predicator.
     */
    key_eq(): (x: Key, y: Key) => boolean;
    /**
     * Compute bucket index for the *key*.
     *
     * @param key Target key.
     * @return Index number.
     */
    bucket(key: Key): number;
    /**
     * Get number of buckets.
     */
    bucket_count(): number;
    /**
     * Get size of a specific bucket.
     *
     * @param index Specific position.
     * @return Size of the specific bucket.
     */
    bucket_size(index: number): number;
    /**
     * Compute load factor.
     *
     * @return `this.size() / this.bucket_count()`
     */
    load_factor(): number;
    /**
     * Get maximum load factor that allowable.
     *
     * @return The maximum load factor.
     */
    max_load_factor(): number;
    /**
     * Set maximum load factor.
     *
     * @param z The new value to change.
     */
    max_load_factor(z: number): void;
    /**
     * Reserve buckets enable to store *n* elements.
     *
     * @param n The capacity to reserve.
     */
    reserve(n: number): void;
    /**
     * Change of bucktes.
     *
     * @param n The number to change.
     */
    rehash(n: number): void;
}
/**
 * @hidden
 */
export declare function _Construct<Key, T extends Elem, SourceT extends _IHashContainer<Key, T, SourceT, IteratorT, ReverseIteratorT, Elem>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, ReverseIteratorT extends IReverseIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, Elem>(source: SourceT, Source: _Factory<SourceT>, bucketFactory: (hashFunction: (key: Key) => number, predicator: (x: Key, y: Key) => boolean) => void, ...args: any[]): void;
/**
 * @hidden
 */
interface _Factory<T, Arguments extends any[] = any[]> {
    new (...args: Arguments): T;
    prototype: T;
}
export {};
//# sourceMappingURL=_IHashContainer.d.ts.map