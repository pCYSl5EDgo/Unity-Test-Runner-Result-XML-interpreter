/** @module std.base */
import { ListContainer } from "./ListContainer";
import { IMapIterator } from "../iterator/IMapIterator";
import { ListIterator } from "../iterator/ListIterator";
import { ReverseIterator as _ReverseIterator } from "../iterator/ReverseIterator";
import { MapContainer } from "./MapContainer";
import { Entry } from "../../utility/Entry";
import { IPair } from "../../utility/IPair";
/**
 * @hidden
 */
export declare class MapElementList<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, MapElementList.Iterator<Key, T, Unique, Source>, MapElementList.ReverseIterator<Key, T, Unique, Source>>> extends ListContainer<Entry<Key, T>, Source, MapElementList.Iterator<Key, T, Unique, Source>, MapElementList.ReverseIterator<Key, T, Unique, Source>> {
    /**
     * @hidden
     */
    private associative_;
    constructor(associative: Source);
    /**
     * @hidden
     */
    protected _Create_iterator(prev: MapElementList.Iterator<Key, T, Unique, Source>, next: MapElementList.Iterator<Key, T, Unique, Source>, val: Entry<Key, T>): MapElementList.Iterator<Key, T, Unique, Source>;
    associative(): Source;
}
export declare namespace MapElementList {
    class Iterator<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>>> extends ListIterator<Entry<Key, T>, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> implements IMapIterator<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>> {
        /**
         * @hidden
         */
        private list_;
        /**
         * @hidden
         */
        private constructor();
        /**
         * @inheritDoc
         */
        reverse(): ReverseIterator<Key, T, Unique, Source>;
        /**
         * @inheritDoc
         */
        source(): Source;
        /**
         * @inheritDoc
         */
        readonly first: Key;
        /**
         * @inheritDoc
         */
        /**
        * @inheritDoc
        */
        second: T;
    }
    class ReverseIterator<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>>> extends _ReverseIterator<Entry<Key, T>, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> {
        /**
         * @hidden
         */
        protected _Create_neighbor(base: Iterator<Key, T, Unique, Source>): ReverseIterator<Key, T, Unique, Source>;
        /**
         * Get the first, key element.
         *
         * @return The first element.
         */
        readonly first: Key;
        /**
         * Get the second, stored element.
         *
         * @return The second element.
         */
        /**
        * Set the second, stored element.
        *
        * @param val The value to set.
        */
        second: T;
    }
}
//# sourceMappingURL=MapElementList.d.ts.map