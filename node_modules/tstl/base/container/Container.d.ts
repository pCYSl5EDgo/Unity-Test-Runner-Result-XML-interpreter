/** @module std.base */
import { IContainer } from "./IContainer";
import { Iterator } from "../iterator/Iterator";
import { IReverseIterator } from "../iterator/ReverseIterator";
import { IForwardIterator } from "../../iterator/IForwardIterator";
/**
 * Basic container.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class Container<T extends Elem, SourceT extends Container<T, SourceT, IteratorT, ReverseIteratorT, Elem>, IteratorT extends Iterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, ReverseIteratorT extends IReverseIterator<T, SourceT, IteratorT, ReverseIteratorT, Elem>, Elem = T> implements IContainer<T, SourceT, IteratorT, ReverseIteratorT, Elem> {
    /**
     * @inheritDoc
     */
    abstract assign<InputIterator extends Readonly<IForwardIterator<Elem, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    abstract size(): number;
    /**
     * @inheritDoc
     */
    empty(): boolean;
    /**
     * @inheritDoc
     */
    abstract begin(): IteratorT;
    /**
     * @inheritDoc
     */
    abstract end(): IteratorT;
    /**
     * @inheritDoc
     */
    rbegin(): ReverseIteratorT;
    /**
     * @inheritDoc
     */
    rend(): ReverseIteratorT;
    /**
     * @inheritDoc
     */
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * @inheritDoc
     */
    abstract push(...items: Elem[]): number;
    /**
     * @inheritDoc
     */
    abstract erase(pos: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    abstract erase(first: IteratorT, last: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    abstract swap(obj: SourceT): void;
    /**
     * @inheritDoc
     */
    toJSON(): Array<T>;
}
//# sourceMappingURL=Container.d.ts.map