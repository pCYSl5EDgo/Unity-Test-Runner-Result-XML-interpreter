/** @module std.base */
import { UniqueMap } from "./UniqueMap";
import { _ITreeContainer } from "./_ITreeContainer";
import { IMapIterator, IMapReverseIterator } from "../iterator/IMapIterator";
import { IPair } from "../../utility/IPair";
import { Pair } from "../../utility/Pair";
import { Entry } from "../../utility/Entry";
export declare abstract class UniqueTreeMap<Key, T, Source extends UniqueTreeMap<Key, T, Source, IteratorT, ReverseT>, IteratorT extends IMapIterator<Key, T, true, Source, IteratorT, ReverseT>, ReverseT extends IMapReverseIterator<Key, T, true, Source, IteratorT, ReverseT>> extends UniqueMap<Key, T, Source, IteratorT, ReverseT> implements _ITreeContainer<Key, Entry<Key, T>, Source, IteratorT, ReverseT, IPair<Key, T>> {
    /**
     * @inheritDoc
     */
    find(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    abstract lower_bound(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    abstract upper_bound(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    equal_range(key: Key): Pair<IteratorT, IteratorT>;
    /**
     * @inheritDoc
     */
    abstract key_comp(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    value_comp(): (x: IPair<Key, T>, y: IPair<Key, T>) => boolean;
    /**
     * @hidden
     */
    protected _Key_eq(x: Key, y: Key): boolean;
    /**
     * @inheritDoc
     */
    emplace(key: Key, val: T): Pair<IteratorT, boolean>;
    /**
     * @inheritDoc
     */
    emplace_hint(hint: IteratorT, key: Key, val: T): IteratorT;
}
//# sourceMappingURL=UniqueTreeMap.d.ts.map