"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std.base */
//================================================================
var _IAssociativeContainer_1 = require("./_IAssociativeContainer");
var comparators_1 = require("../../functional/comparators");
/**
 * @hidden
 */
function _Construct(source, Source, treeFactory) {
    var args = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
    }
    // DECLARE MEMBERS
    var post_process = null;
    var comp = comparators_1.less;
    //----
    // INITIALIZE MEMBERS AND POST-PROCESS
    //----
    // BRANCH - METHOD OVERLOADINGS
    if (args.length === 1 && args[0] instanceof Source) {
        // PARAMETERS
        var container_1 = args[0];
        comp = container_1.key_comp();
        // COPY CONSTRUCTOR
        post_process = function () {
            var first = container_1.begin();
            var last = container_1.end();
            source.assign(first, last);
        };
    }
    else {
        var tuple = _IAssociativeContainer_1._Fetch_arguments.apply(void 0, __spread([source], args));
        post_process = tuple.ramda;
        if (tuple.tail.length >= 1)
            comp = tuple.tail[0];
    }
    //----
    // DO PROCESS
    //----
    // CONSTRUCT TREE
    treeFactory(comp);
    // ACT POST-PROCESS
    if (post_process !== null)
        post_process();
}
exports._Construct = _Construct;
/**
 * @hidden
 */
function _Emplacable(source, hint, elem) {
    var prev = hint.prev();
    var meet = prev.equals(source.end()) || source.value_comp()(prev.value, elem);
    meet = meet && (hint.equals(source.end()) || source.value_comp()(elem, hint.value));
    return meet;
}
exports._Emplacable = _Emplacable;
//# sourceMappingURL=_ITreeContainer.js.map