/** @module std.base */
import { VectorContainer } from "./VectorContainer";
import { ArrayIteratorBase, ArrayReverseIteratorBase } from "../iterator/ArrayIteratorBase";
import { IMapIterator, IMapReverseIterator } from "../iterator/IMapIterator";
import { MapContainer } from "./MapContainer";
import { Entry } from "../../utility/Entry";
import { IPair } from "../../utility/IPair";
/**
 * @hidden
 */
export declare class MapElementVector<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, MapElementVector.Iterator<Key, T, Unique, Source>, MapElementVector.ReverseIterator<Key, T, Unique, Source>>> extends VectorContainer<Entry<Key, T>, Source, MapElementVector<Key, T, Unique, Source>, MapElementVector.Iterator<Key, T, Unique, Source>, MapElementVector.ReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> {
    private associative_;
    constructor(associative: Source);
    nth(index: number): MapElementVector.Iterator<Key, T, Unique, Source>;
    associative(): Source;
}
export declare namespace MapElementVector {
    class Iterator<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>>> extends ArrayIteratorBase<Entry<Key, T>, Source, MapElementVector<Key, T, Unique, Source>, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> implements IMapIterator<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>> {
        /**
         * @inheritDoc
         */
        source(): Source;
        /**
         * @inheritDoc
         */
        reverse(): ReverseIterator<Key, T, Unique, Source>;
        /**
         * @inheritDoc
         */
        readonly first: Key;
        /**
         * @inheritDoc
         */
        /**
        * @inheritDoc
        */
        second: T;
    }
    class ReverseIterator<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>>> extends ArrayReverseIteratorBase<Entry<Key, T>, Source, MapElementVector<Key, T, Unique, Source>, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>, IPair<Key, T>> implements IMapReverseIterator<Key, T, Unique, Source, Iterator<Key, T, Unique, Source>, ReverseIterator<Key, T, Unique, Source>> {
        /**
         * @hidden
         */
        protected _Create_neighbor(base: Iterator<Key, T, Unique, Source>): ReverseIterator<Key, T, Unique, Source>;
        /**
         * @inheritDoc
         */
        readonly first: Key;
        /**
         * @inheritDoc
         */
        /**
        * @inheritDoc
        */
        second: T;
    }
}
//# sourceMappingURL=MapElementVector.d.ts.map