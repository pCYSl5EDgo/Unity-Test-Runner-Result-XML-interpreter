/** @module std.base */
import { _IEmpty, _ISize, _IPush } from "../disposable/IPartialContainers";
/**
 * Base class for Adaptor Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class AdaptorContainer<T, Source extends _IEmpty & _ISize & _IPush<T>, This extends AdaptorContainer<T, Source, This>> implements _IEmpty, _ISize, _IPush<T> {
    /**
     * @hidden
     */
    protected source_: Source;
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * @inheritDoc
     */
    empty(): boolean;
    /**
     * @inheritDoc
     */
    push(...elems: T[]): number;
    /**
     * Remove element.
     */
    abstract pop(): void;
    /**
     * Swap elements.
     *
     * @param obj Target container to swap.
     */
    swap(obj: This): void;
}
//# sourceMappingURL=AdaptorContainer.d.ts.map