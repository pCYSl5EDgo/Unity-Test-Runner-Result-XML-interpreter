/** @module std.base */
import { Container } from "./Container";
import { _IAssociativeContainer } from "./_IAssociativeContainer";
import { IMapIterator, IMapReverseIterator } from "../iterator/IMapIterator";
import { ILinearContainer } from "./ILinearContainer";
import { IForwardIterator } from "../../iterator/IForwardIterator";
import { IPair } from "../../utility/IPair";
import { Pair } from "../../utility/Pair";
import { Entry } from "../../utility/Entry";
/**
 * Base class for Map Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class MapContainer<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, IteratorT, ReverseT>, IteratorT extends IMapIterator<Key, T, Unique, Source, IteratorT, ReverseT>, ReverseT extends IMapReverseIterator<Key, T, Unique, Source, IteratorT, ReverseT>> extends Container<Entry<Key, T>, Source, IteratorT, ReverseT, IPair<Key, T>> implements _IAssociativeContainer<Key, Entry<Key, T>, Source, IteratorT, ReverseT, IPair<Key, T>> {
    /**
     * @hidden
     */
    protected data_: ILinearContainer<Entry<Key, T>, Source, IteratorT, ReverseT>;
    /**
     * Default Constructor.
     */
    protected constructor(factory: (thisArg: Source) => ILinearContainer<Entry<Key, T>, Source, IteratorT, ReverseT>);
    /**
     * @inheritDoc
     */
    assign<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    abstract find(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    begin(): IteratorT;
    /**
     * @inheritDoc
     */
    end(): IteratorT;
    /**
     * @inheritDoc
     */
    has(key: Key): boolean;
    /**
     * @inheritDoc
     */
    abstract count(key: Key): number;
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * @inheritDoc
     */
    push(...items: IPair<Key, T>[]): number;
    abstract emplace(key: Key, val: T): MapContainer.InsertRet<Key, T, Unique, Source, IteratorT, ReverseT>;
    abstract emplace_hint(hint: IteratorT, key: Key, val: T): IteratorT;
    insert(pair: IPair<Key, T>): MapContainer.InsertRet<Key, T, Unique, Source, IteratorT, ReverseT>;
    insert(hint: IteratorT, pair: IPair<Key, T>): IteratorT;
    insert<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @hidden
     */
    protected abstract _Insert_by_range<InputIterator extends Readonly<IForwardIterator<IPair<Key, T>, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    erase(key: Key): number;
    /**
     * @inheritDoc
     */
    erase(it: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    erase(begin: IteratorT, end: IteratorT): IteratorT;
    /**
     * @hidden
     */
    protected abstract _Erase_by_key(key: Key): number;
    /**
     * @hidden
     */
    protected _Erase_by_range(first: IteratorT, last?: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    abstract swap(obj: Source): void;
    /**
     * Merge two containers.
     *
     * @param source Source container to transfer.
     */
    abstract merge(source: Source): void;
    /**
     * @hidden
     */
    protected abstract _Handle_insert(first: IteratorT, last: IteratorT): void;
    /**
     * @hidden
     */
    protected abstract _Handle_erase(first: IteratorT, last: IteratorT): void;
}
export declare namespace MapContainer {
    type InsertRet<Key, T, Unique extends boolean, Source extends MapContainer<Key, T, Unique, Source, Iterator, Reverse>, Iterator extends IMapIterator<Key, T, Unique, Source, Iterator, Reverse>, Reverse extends IMapReverseIterator<Key, T, Unique, Source, Iterator, Reverse>> = Unique extends true ? Pair<Iterator, boolean> : Iterator;
}
//# sourceMappingURL=MapContainer.d.ts.map