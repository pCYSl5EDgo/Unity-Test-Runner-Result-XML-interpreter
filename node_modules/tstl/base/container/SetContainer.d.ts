/** @module std.base */
import { Container } from "./Container";
import { _IAssociativeContainer } from "./_IAssociativeContainer";
import { ISetIterator, ISetReverseIterator } from "../iterator/ISetIterator";
import { ILinearContainer } from "./ILinearContainer";
import { IForwardIterator } from "../../iterator/IForwardIterator";
import { Pair } from "../../utility/Pair";
/**
 * Base class for Set Containers.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare abstract class SetContainer<Key, Unique extends boolean, Source extends SetContainer<Key, Unique, Source, IteratorT, ReverseT>, IteratorT extends ISetIterator<Key, Unique, Source, IteratorT, ReverseT>, ReverseT extends ISetReverseIterator<Key, Unique, Source, IteratorT, ReverseT>> extends Container<Key, Source, IteratorT, ReverseT, Key> implements _IAssociativeContainer<Key, Key, Source, IteratorT, ReverseT, Key> {
    /**
     * @hidden
     */
    protected data_: ILinearContainer<Key, Source, IteratorT, ReverseT>;
    /**
     * Default Constructor.
     */
    protected constructor(factory: (thisArg: Source) => ILinearContainer<Key, Source, IteratorT, ReverseT>);
    /**
     * @inheritDoc
     */
    assign<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @inheritDoc
     */
    clear(): void;
    /**
     * @inheritDoc
     */
    abstract find(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    begin(): IteratorT;
    /**
     * @inheritDoc
     */
    end(): IteratorT;
    /**
     * @inheritDoc
     */
    has(key: Key): boolean;
    /**
     * @inheritDoc
     */
    abstract count(key: Key): number;
    /**
     * @inheritDoc
     */
    size(): number;
    /**
     * @inheritDoc
     */
    push(...items: Key[]): number;
    insert(key: Key): SetContainer.InsertRet<Key, Unique, Source, IteratorT, ReverseT>;
    insert(hint: IteratorT, key: Key): IteratorT;
    insert<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(first: InputIterator, last: InputIterator): void;
    /**
     * @hidden
     */
    protected abstract _Insert_by_key(key: Key): SetContainer.InsertRet<Key, Unique, Source, IteratorT, ReverseT>;
    /**
     * @hidden
     */
    protected abstract _Insert_by_hint(hint: IteratorT, key: Key): IteratorT;
    /**
     * @hidden
     */
    protected abstract _Insert_by_range<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(begin: InputIterator, end: InputIterator): void;
    /**
     * @inheritDoc
     */
    erase(key: Key): number;
    /**
     * @inheritDoc
     */
    erase(pos: IteratorT): IteratorT;
    /**
     * @inheritDoc
     */
    erase(first: IteratorT, last: IteratorT): IteratorT;
    /**
     * @hidden
     */
    protected abstract _Erase_by_val(key: Key): number;
    /**
     * @hidden
     */
    protected _Erase_by_range(first: IteratorT, last?: IteratorT): IteratorT;
    /**
     * @hidden
     */
    abstract swap(obj: Source): void;
    /**
     * @inheritDoc
     */
    abstract merge(source: Source): void;
    /**
     * @hidden
     */
    protected abstract _Handle_insert(first: IteratorT, last: IteratorT): void;
    /**
     * @hidden
     */
    protected abstract _Handle_erase(first: IteratorT, last: IteratorT): void;
}
export declare namespace SetContainer {
    type InsertRet<Key, Unique extends boolean, Source extends SetContainer<Key, Unique, Source, IteratorT, ReverseT>, IteratorT extends ISetIterator<Key, Unique, Source, IteratorT, ReverseT>, ReverseT extends ISetReverseIterator<Key, Unique, Source, IteratorT, ReverseT>> = Unique extends true ? Pair<IteratorT, boolean> : IteratorT;
}
//# sourceMappingURL=SetContainer.d.ts.map