/** @module std.base */
import { MultiSet } from "./MultiSet";
import { _ITreeContainer } from "./_ITreeContainer";
import { ISetIterator, ISetReverseIterator } from "../iterator/ISetIterator";
import { Pair } from "../../utility/Pair";
import { IForwardIterator } from "../../iterator";
export declare abstract class MultiTreeSet<Key, Source extends MultiTreeSet<Key, Source, IteratorT, ReverseT>, IteratorT extends ISetIterator<Key, false, Source, IteratorT, ReverseT>, ReverseT extends ISetReverseIterator<Key, false, Source, IteratorT, ReverseT>> extends MultiSet<Key, Source, IteratorT, ReverseT> implements _ITreeContainer<Key, Key, Source, IteratorT, ReverseT, Key> {
    /**
     * @inheritDoc
     */
    find(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    count(key: Key): number;
    /**
     * @inheritDoc
     */
    abstract lower_bound(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    abstract upper_bound(key: Key): IteratorT;
    /**
     * @inheritDoc
     */
    equal_range(key: Key): Pair<IteratorT, IteratorT>;
    /**
     * @inheritDoc
     */
    abstract key_comp(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    value_comp(): (x: Key, y: Key) => boolean;
    /**
     * @hidden
     */
    protected _Key_eq(x: Key, y: Key): boolean;
    /**
     * @hidden
     */
    protected _Insert_by_key(key: Key): IteratorT;
    /**
     * @hidden
     */
    protected _Insert_by_hint(hint: IteratorT, key: Key): IteratorT;
    /**
     * @hidden
     */
    protected _Insert_by_range<InputIterator extends Readonly<IForwardIterator<Key, InputIterator>>>(first: InputIterator, last: InputIterator): void;
}
//# sourceMappingURL=MultiTreeSet.d.ts.map