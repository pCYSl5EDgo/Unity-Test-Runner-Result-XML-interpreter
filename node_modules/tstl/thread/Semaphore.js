"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std.experimental */
//================================================================
var List_1 = require("../container/List");
var LogicError_1 = require("../exception/LogicError");
var global_1 = require("./global");
/**
 * Counting semaphore.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
var Semaphore = /** @class */ (function () {
    /* ---------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------- */
    /**
     * Initializer Constructor.
     *
     * @param max Number of maximum sections lockable.
     */
    function Semaphore(max) {
        this.max_ = max;
        this.acquiring_ = 0;
        this.queue_ = new List_1.List();
    }
    /**
     * Number of maximum sections lockable.
     */
    Semaphore.prototype.max = function () {
        return this.max_;
    };
    Semaphore.prototype.get_lockable = function () {
        return new Semaphore.Lockable(this);
    };
    /* ---------------------------------------------------------
        ACQURE & RELEASE
    --------------------------------------------------------- */
    /**
     * Acquire a section until be released.
     */
    Semaphore.prototype.acquire = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.acquiring_ < _this.max_) {
                ++_this.acquiring_;
                resolve();
            }
            else {
                _this.queue_.push_back({
                    handler: resolve,
                    type: 0 /* HOLD */
                });
            }
        });
    };
    /**
     * Try acquire a section.
     *
     * @return Whether succeeded to acquire or not.
     */
    Semaphore.prototype.try_acquire = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // ALL OR NOTHING
                if (this.acquiring_ < this.max_) {
                    ++this.acquiring_;
                    return [2 /*return*/, true];
                }
                else
                    return [2 /*return*/, false];
                return [2 /*return*/];
            });
        });
    };
    /**
     * @inheritDoc
     */
    Semaphore.prototype.release = function (count) {
        if (count === void 0) { count = 1; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // VALIDATE COUNT
                if (count < 1)
                    throw new LogicError_1.OutOfRange("Error on std.experimental.Semaphore.release(): parametric count is less than 1 -> (count = " + count + ").");
                else if (count > this.max_)
                    throw new LogicError_1.OutOfRange("Error on std.experimental.Semaphore.release(): parametric count is greater than max -> (count = " + count + ", max = " + this.max_ + ").");
                else if (count > this.acquiring_)
                    throw new LogicError_1.OutOfRange("Error on std.experimental.Semaphore.release(): parametric count is greater than acquiring -> (count = " + count + ", acquiring = " + this.acquiring_ + ").");
                // DO RELEASE
                this.acquiring_ -= count;
                this._Release(count);
                return [2 /*return*/];
            });
        });
    };
    /**
     * @hidden
     */
    Semaphore.prototype._Release = function (count) {
        for (var it = this.queue_.begin(); !it.equals(this.queue_.end()); it = it.next()) {
            // DO RESOLVE
            this.queue_.erase(it);
            if (it.value.type === 0 /* HOLD */)
                it.value.handler();
            else {
                it.value.handler(true);
                it.value.handler = null;
            }
            // BREAK CONDITION
            if (++this.acquiring_ >= this.max_ || --count === 0)
                break;
        }
    };
    /**
     * @hidden
     */
    Semaphore.prototype._Cancel = function (it) {
        // POP THE LISTENER
        --this.acquiring_;
        this.queue_.erase(it);
        var handler = it.value.handler;
        it.value.handler = null;
        // RELEASE IF LASTEST RESOLVER
        var prev = it.prev();
        if (prev.equals(this.queue_.end()) === false && prev.value.handler === null)
            this._Release(1);
        // RETURNS FAILURE
        handler(false);
    };
    /* ---------------------------------------------------------
        TIMED ACQUIRE
    --------------------------------------------------------- */
    /**
     * Try acquire a section until timeout.
     *
     * @param ms The maximum miliseconds for waiting.
     * @return Whether succeded to acquire or not.
     */
    Semaphore.prototype.try_acquire_for = function (ms) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        if (_this.acquiring_++ < _this.max_)
                            resolve(true);
                        else {
                            // RESERVE ACQUIRE
                            var it_1 = _this.queue_.insert(_this.queue_.end(), {
                                handler: resolve,
                                type: 1 /* KNOCK */
                            });
                            // AUTOMATIC RELEASE AFTER TIMEOUT
                            global_1.sleep_for(ms).then(function () {
                                // NOT YET, THEN DO RELEASE
                                if (it_1.value.handler !== null)
                                    _this._Cancel(it_1);
                            });
                        }
                    })];
            });
        });
    };
    /**
     * Try acquire a section until time expiration.
     *
     * @param at The maximum time point to wait.
     * @return Whether succeded to acquire or not.
     */
    Semaphore.prototype.try_acquire_until = function (at) {
        // COMPUTE MILLISECONDS TO WAIT
        var now = new Date();
        var ms = at.getTime() - now.getTime();
        return this.try_acquire_for(ms);
    };
    return Semaphore;
}());
exports.Semaphore = Semaphore;
(function (Semaphore) {
    /**
     * @internal
     */
    var Lockable = /** @class */ (function () {
        function Lockable(semaphore) {
            this.semahpore_ = semaphore;
        }
        Lockable.prototype.lock = function () {
            return this.semahpore_.acquire();
        };
        Lockable.prototype.try_lock = function () {
            return this.semahpore_.try_acquire();
        };
        Lockable.prototype.unlock = function () {
            return this.semahpore_.release();
        };
        return Lockable;
    }());
    Semaphore.Lockable = Lockable;
})(Semaphore = exports.Semaphore || (exports.Semaphore = {}));
exports.Semaphore = Semaphore;
exports.couting_semaphore = Semaphore;
//# sourceMappingURL=Semaphore.js.map