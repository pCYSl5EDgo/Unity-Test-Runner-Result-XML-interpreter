"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _SafeLock_1 = require("../base/thread/_SafeLock");
var UniqueLock = /** @class */ (function () {
    /* ---------------------------------------------------------
        CONSTRUCTOR
    --------------------------------------------------------- */
    function UniqueLock(mutex) {
        this.mutex_ = mutex;
        this.try_lock_for = mutex.try_lock_for instanceof Function
            ? UniqueLock.try_lock_for.bind(undefined, this.mutex_)
            : undefined;
        this.try_lock_until = mutex.try_lock_until instanceof Function
            ? UniqueLock.try_lock_until.bind(undefined, this.mutex_)
            : undefined;
    }
    /* ---------------------------------------------------------
        COMMON METHODS
    --------------------------------------------------------- */
    UniqueLock.prototype.lock = function (closure) {
        return UniqueLock.lock(this.mutex_, closure);
    };
    UniqueLock.prototype.try_lock = function (closure) {
        return UniqueLock.try_lock(this.mutex_, closure);
    };
    return UniqueLock;
}());
exports.UniqueLock = UniqueLock;
(function (UniqueLock) {
    /* ---------------------------------------------------------
        STATIC FUNCTIONS
    --------------------------------------------------------- */
    function lock(mutex, closure) {
        return _SafeLock_1._SafeLock.lock(function () { return mutex.lock(); }, function () { return mutex.unlock(); }, closure);
    }
    UniqueLock.lock = lock;
    function try_lock(mutex, closure) {
        return _SafeLock_1._SafeLock.try_lock(function () { return mutex.try_lock(); }, function () { return mutex.unlock(); }, closure);
    }
    UniqueLock.try_lock = try_lock;
    function try_lock_for(mutex, ms, closure) {
        return _SafeLock_1._SafeLock.try_lock(function () { return mutex.try_lock_for(ms); }, function () { return mutex.unlock(); }, closure);
    }
    UniqueLock.try_lock_for = try_lock_for;
    function try_lock_until(mutex, at, closure) {
        return _SafeLock_1._SafeLock.try_lock(function () { return mutex.try_lock_until(at); }, function () { return mutex.unlock(); }, closure);
    }
    UniqueLock.try_lock_until = try_lock_until;
})(UniqueLock = exports.UniqueLock || (exports.UniqueLock = {}));
exports.UniqueLock = UniqueLock;
exports.unique_lock = UniqueLock;
//# sourceMappingURL=UniqueLock.js.map