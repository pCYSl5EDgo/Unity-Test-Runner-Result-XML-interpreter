import { _ITimedLockable } from "../base/thread/_ITimedLockable";
import { _ISharedTimedLockable } from "../base/thread/_ISharedTimedLockable";
/**
 * Shared timed mutex.
 *
 * @author Jeongho Nam <http://samchon.org>
 */
export declare class SharedTimedMutex implements _ITimedLockable, _ISharedTimedLockable {
    /**
     * @hidden
     */
    private source_;
    /**
     * @hidden
     */
    private queue_;
    /**
     * @hidden
     */
    private writing_;
    /**
     * @hidden
     */
    private reading_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * @hidden
     */
    private _Current_access_type;
    /**
     * @inheritDoc
     */
    lock(): Promise<void>;
    /**
     * @inheritDoc
     */
    try_lock(): Promise<boolean>;
    /**
     * @inheritDoc
     */
    try_lock_for(ms: number): Promise<boolean>;
    /**
     * @inheritDoc
     */
    try_lock_until(at: Date): Promise<boolean>;
    /**
     * @inheritDoc
     */
    unlock(): Promise<void>;
    /**
     * @inheritDoc
     */
    lock_shared(): Promise<void>;
    /**
     * @inheritDoc
     */
    try_lock_shared(): Promise<boolean>;
    /**
     * @inheritDoc
     */
    try_lock_shared_for(ms: number): Promise<boolean>;
    /**
     * @inheritDoc
     */
    try_lock_shared_until(at: Date): Promise<boolean>;
    /**
     * @inheritDoc
     */
    unlock_shared(): Promise<void>;
    /**
     * @hidden
     */
    private _Release;
    /**
     * @hidden
     */
    private _Cancel;
}
export declare type shared_timed_mutex = SharedTimedMutex;
export declare const shared_timed_mutex: typeof SharedTimedMutex;
//# sourceMappingURL=SharedTimedMutex.d.ts.map