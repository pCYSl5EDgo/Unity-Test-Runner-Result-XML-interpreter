/** @module std.experimental */
import { IPointer } from "../functional";
import { IForwardIterator } from "../iterator";
import { _IListAlgorithm } from "../base/disposable/IListAlgorithm";
/**
 * Erase matched elements.
 *
 * @param container Container to erase matched elements.
 * @param val Value to erase.
 */
export declare function erase<Container extends IErasableContainer<Iterator>, Iterator extends Readonly<IForwardIterator<IPointer.ValueType<Iterator>, Iterator>>>(container: Container, val: IPointer.ValueType<Iterator>): void;
export declare function erase<Container extends Pick<_IListAlgorithm<_IListAlgorithm.ValueType<Container>, Container>, "remove_if">>(contaier: Container, val: _IListAlgorithm.ValueType<Container>): void;
/**
 * Erase special elements.
 *
 * @param container Container to erase special elements.
 * @param predicator A predicator to detect the speicality.
 */
export declare function erase_if<Container extends IErasableContainer<Iterator>, Iterator extends Readonly<IForwardIterator<IPointer.ValueType<Iterator>, Iterator>>>(container: Container, predicator: (val: IPointer.ValueType<Iterator>) => boolean): void;
export declare function erase_if<Container extends Pick<_IListAlgorithm<_IListAlgorithm.ValueType<Container>, Container>, "remove_if">>(contaier: Container, predicator: (val: _IListAlgorithm.ValueType<Container>) => boolean): void;
/**
 * @hidden
 */
interface IErasableContainer<Iterator extends Readonly<IForwardIterator<IPointer.ValueType<Iterator>, Iterator>>> {
    begin(): Iterator;
    end(): Iterator;
    erase(first: Iterator, last: Iterator): Iterator;
}
export {};
//# sourceMappingURL=algorithm.d.ts.map