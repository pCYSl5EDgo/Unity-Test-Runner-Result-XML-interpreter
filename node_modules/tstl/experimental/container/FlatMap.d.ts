/** @module std.experimental */
import { UniqueTreeMap } from "../../base/container/UniqueTreeMap";
import { MapElementVector } from "../../base/container/MapElementVector";
import { IPair } from "../../utility/IPair";
import { IForwardIterator } from "../../iterator/IForwardIterator";
export declare class FlatMap<Key, T> extends UniqueTreeMap<Key, T, FlatMap<Key, T>, FlatMap.Iterator<Key, T>, FlatMap.ReverseIterator<Key, T>> {
    /**
     * @hidden
     */
    private key_comp_;
    /**
     * Default Constructor.
     *
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(comp?: (x: Key, y: Key) => boolean);
    /**
     * Initializer Constructor.
     *
     * @param items Items to assign.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(items: IPair<Key, T>[], comp?: (x: Key, y: Key) => boolean);
    /**
     * Copy Constructor.
     *
     * @param obj Object to copy.
     */
    constructor(obj: FlatMap<Key, T>);
    /**
     * Range Constructor.
     *
     * @param first Input iterator of the first position.
     * @param last Input iterator of the last position.
     * @param comp A binary function predicates *x* element would be placed before *y*. When returns `true`, then *x* precedes *y*. Note that, because *equality* is predicated by `!comp(x, y) && !comp(y, x)`, the function must not cover the *equality* like `<=` or `>=`. It must exclude the *equality* like `<` or `>`. Default is {@link less}.
     */
    constructor(first: Readonly<IForwardIterator<IPair<Key, T>>>, last: Readonly<IForwardIterator<IPair<Key, T>>>, comp?: (x: Key, y: Key) => boolean);
    /**
     * @inheritDoc
     */
    swap(obj: FlatMap<Key, T>): void;
    /**
     * @inheritDoc
     */
    nth(index: number): FlatMap.Iterator<Key, T>;
    /**
     * @inheritDoc
     */
    key_comp(): (x: Key, y: Key) => boolean;
    /**
     * @inheritDoc
     */
    lower_bound(key: Key): FlatMap.Iterator<Key, T>;
    /**
     * @inheritDoc
     */
    upper_bound(key: Key): FlatMap.Iterator<Key, T>;
    /**
     * @hidden
     */
    private _Capsule_key;
    /**
     * @hidden
     */
    protected _Handle_insert({}: {}, {}: {}): void;
    /**
     * @hidden
     */
    protected _Handle_erase({}: {}, {}: {}): void;
}
export declare namespace FlatMap {
    type Iterator<Key, T> = MapElementVector.Iterator<Key, T, true, FlatMap<Key, T>>;
    type ReverseIterator<Key, T> = MapElementVector.ReverseIterator<Key, T, true, FlatMap<Key, T>>;
    const Iterator: typeof MapElementVector.Iterator;
    const ReverseIterator: typeof MapElementVector.ReverseIterator;
    type iterator<Key, T> = Iterator<Key, T>;
    type reverse_iterator<Key, T> = ReverseIterator<Key, T>;
    const iterator: typeof MapElementVector.Iterator;
    const reverse_iterator: typeof MapElementVector.ReverseIterator;
}
export import flat_map = FlatMap;
//# sourceMappingURL=FlatMap.d.ts.map